package com.agitrubard.authside.auth.application.config;

import com.agitrubard.authside.auth.application.port.in.command.AuthSideParameterSaveCommand;
import com.agitrubard.authside.auth.application.port.in.usecase.AuthSideParameterUseCase;
import com.agitrubard.authside.auth.domain.parameter.model.AuthSideParameter;
import com.agitrubard.authside.common.application.exception.AuthSideUnexpectedArgumentException;
import com.agitrubard.authside.common.util.AuthSideKeyPairUtil;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Configuration;

import java.security.KeyPair;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.Optional;
import java.util.Set;

/**
 * The {@code AuthSideTokenConfigurationParameter} class represents a configuration parameter provider for token-related settings
 * in the authentication side of the application. It is responsible for initializing token-related parameters, such as issuer,
 * token expiration times, and cryptographic keys.
 * <p>
 * This class retrieves configuration parameters from the database using the {@link AuthSideParameterUseCase}, and it generates
 * and saves new key pairs if needed based on the application's configuration.
 *
 * @author Agit Rubar Demir | @agitrubard
 * @version 1.0.0
 */
@Slf4j
@Getter
@Configuration
public class AuthSideTokenConfigurationParameter {

    /**
     * The issuer of the tokens generated by the application. This field is set based on the configuration settings
     * retrieved from the database.
     */
    private final String issuer;

    /**
     * The expiration time in minutes for access tokens. This field is set based on the configuration settings retrieved
     * from the database.
     */
    private final Integer accessTokenExpireMinute;

    /**
     * The expiration time in days for refresh tokens. This field is set based on the configuration settings retrieved
     * from the database.
     */
    private final Integer refreshTokenExpireDay;

    /**
     * The private key used for token generation and decryption. This key is retrieved from the database configuration.
     */
    private final PrivateKey privateKey;

    /**
     * The public key used for token verification. This key is retrieved from the database configuration.
     */
    private final PublicKey publicKey;


    /**
     * Constructs an instance of the {@code AuthSideTokenConfigurationParameter} class and initializes token-related parameters
     * based on the configuration settings retrieved from the database using the provided {@link AuthSideParameterUseCase}.
     *
     * @param parameterUseCase The use case for managing authentication parameters.
     */
    public AuthSideTokenConfigurationParameter(AuthSideParameterUseCase parameterUseCase) {

        log.info("AuthSide Token Configuration is initializing with AuthSide Parameters...");

        final Set<AuthSideParameter> authConfigurationParameters = parameterUseCase
                .getAllByPrefixOfName("AUTH_");


        this.issuer = Optional
                .ofNullable(TokenConfigurationParameter.AUTH_TOKENS_ISSUER.getDefinition(authConfigurationParameters))
                .orElseThrow(AuthSideUnexpectedArgumentException::new);

        log.trace("AuthSide Token Configuration is issuer: {}", this.issuer);


        this.accessTokenExpireMinute = Optional
                .ofNullable(TokenConfigurationParameter.AUTH_ACCESS_TOKEN_EXPIRE_MINUTE.getDefinition(authConfigurationParameters))
                .map(Integer::valueOf)
                .orElseThrow(AuthSideUnexpectedArgumentException::new);

        log.trace("AuthSide Token Configuration is accessTokenExpireMinute: {}", this.accessTokenExpireMinute);


        this.refreshTokenExpireDay = Optional
                .ofNullable(TokenConfigurationParameter.AUTH_REFRESH_TOKEN_EXPIRE_DAY.getDefinition(authConfigurationParameters))
                .map(Integer::valueOf)
                .orElseThrow(AuthSideUnexpectedArgumentException::new);

        log.trace("AuthSide Token Configuration is refreshTokenExpireDay: {}", this.refreshTokenExpireDay);


        this.createAndSaveKeyPairIfNeedsToCreating(authConfigurationParameters, parameterUseCase);
        Set<AuthSideParameter> authTokenConfigurationParameters = parameterUseCase
                .getAllByPrefixOfName("AUTH_TOKEN_");


        final String encryptedPrivateKeyPem = Optional
                .ofNullable(TokenConfigurationParameter.AUTH_TOKEN_PRIVATE_KEY.getDefinition(authTokenConfigurationParameters))
                .orElseThrow(AuthSideUnexpectedArgumentException::new);
        this.privateKey = AuthSideKeyPairUtil.convertPrivateKey(encryptedPrivateKeyPem);

        log.trace("AuthSide Token Configuration is encryptedPrivateKeyPem: {}", encryptedPrivateKeyPem);


        final String encryptedPublicKeyPem = Optional
                .ofNullable(TokenConfigurationParameter.AUTH_TOKEN_PUBLIC_KEY.getDefinition(authTokenConfigurationParameters))
                .orElseThrow(AuthSideUnexpectedArgumentException::new);
        this.publicKey = AuthSideKeyPairUtil.convertPublicKey(encryptedPublicKeyPem);

        log.trace("AuthSide Token Configuration is encryptedPublicKeyPem: {}", encryptedPublicKeyPem);

        log.info("AuthSide Token Configuration is initialized!");
    }

    /**
     * Creates and saves a new key pair if needed based on the application's configuration.
     *
     * @param configurationParameters The set of authentication parameters.
     * @param parameterUseCase        The use case for managing authentication parameters.
     */
    private void createAndSaveKeyPairIfNeedsToCreating(final Set<AuthSideParameter> configurationParameters,
                                                       final AuthSideParameterUseCase parameterUseCase) {

        final boolean willKeyPairGeneratedWhenEveryApplicationStarts = Optional
                .of(TokenConfigurationParameter.AUTH_NEW_KEY_PAIR_GENERATED_WHEN_APPLICATION_STARTS.getDefinition(configurationParameters))
                .map(Boolean::parseBoolean)
                .orElseThrow(AuthSideUnexpectedArgumentException::new);

        if (willKeyPairGeneratedWhenEveryApplicationStarts) {
            this.generateAndSaveKeyPair(parameterUseCase);
        }


        boolean isPrivateKeyAlreadyGenerated = TokenConfigurationParameter
                .AUTH_TOKEN_PRIVATE_KEY.isExistFrom(configurationParameters);
        boolean isPublicKeyAlreadyGenerated = TokenConfigurationParameter
                .AUTH_TOKEN_PUBLIC_KEY.isExistFrom(configurationParameters);

        if (!isPrivateKeyAlreadyGenerated || !isPublicKeyAlreadyGenerated) {
            this.generateAndSaveKeyPair(parameterUseCase);
        }

    }

    /**
     * Generates and saves a new key pair, updating the database with the private and public keys.
     *
     * @param parameterUseCase The use case for managing authentication parameters.
     */
    private void generateAndSaveKeyPair(final AuthSideParameterUseCase parameterUseCase) {

        log.info("AuthSide Token Configuration is generating a new key pair...");

        final KeyPair keyPair = AuthSideKeyPairUtil.generateKeyPair();

        final AuthSideParameterSaveCommand privateKeySaveCommand = AuthSideParameterSaveCommand.builder()
                .name(TokenConfigurationParameter.AUTH_TOKEN_PRIVATE_KEY.name())
                .definition(AuthSideKeyPairUtil.getPemFormattedEncryptedPrivateKey(keyPair.getPrivate()))
                .build();
        final AuthSideParameterSaveCommand publicKeySaveCommand = AuthSideParameterSaveCommand.builder()
                .name(TokenConfigurationParameter.AUTH_TOKEN_PUBLIC_KEY.name())
                .definition(AuthSideKeyPairUtil.getPemFormattedEncryptedPublicKey(keyPair.getPublic()))
                .build();

        parameterUseCase.saveAll(Set.of(privateKeySaveCommand, publicKeySaveCommand));

        log.info("AuthSide Token Configuration is generated a new key pair!");
    }


    /**
     * The {@code TokenConfigurationParameter} enum represents token-related configuration parameters used by the
     * {@code AuthSideTokenConfigurationParameter} class. Each enum constant defines a specific configuration parameter
     * key, along with a default value. These parameters are used for configuring various aspects of token generation
     * and authentication in the application.
     */
    @Getter
    @RequiredArgsConstructor
    private enum TokenConfigurationParameter {

        /**
         * This parameter is used to set the issuer of the token.
         */
        AUTH_TOKENS_ISSUER("AUTH_SIDE"),

        /**
         * This parameter is used to set the expiration time of the access token.
         */
        AUTH_ACCESS_TOKEN_EXPIRE_MINUTE("120"),

        /**
         * This parameter is used to set the expiration time of the refresh token.
         */
        AUTH_REFRESH_TOKEN_EXPIRE_DAY("1"),

        /**
         * If this parameter is true, a new key pair will be generated when every application starts.
         */
        AUTH_NEW_KEY_PAIR_GENERATED_WHEN_APPLICATION_STARTS("false"),

        /**
         * This parameter is used to set the private key of the token.
         */
        AUTH_TOKEN_PRIVATE_KEY(""),

        /**
         * This parameter is used to set the public key of the token.
         */
        AUTH_TOKEN_PUBLIC_KEY("");

        private final String defaultValue;


        /**
         * Get the definition of the configuration parameter from the provided set of authentication parameters. If the
         * parameter is found in the set, its value is returned; otherwise, the default value is used.
         *
         * @param parameters The set of authentication parameters from the database.
         * @return The value of the configuration parameter or the default value if not found.
         */
        public String getDefinition(final Set<AuthSideParameter> parameters) {
            Optional<String> parameter = parameters.stream()
                    .filter(parameterFromDatabase -> parameterFromDatabase.getName().equals(this.name()))
                    .findFirst()
                    .map(AuthSideParameter::getDefinition);

            if (parameter.isPresent()) {
                return parameter.get();
            }

            if (AUTH_TOKEN_PRIVATE_KEY.equals(this) || AUTH_TOKEN_PUBLIC_KEY.equals(this)) {
                return this.defaultValue;
            }

            log.warn("AuthSide Token Configuration is using default value for {}! default value: {}", this.name(), this.defaultValue);
            return this.defaultValue;
        }

        /**
         * Check if the configuration parameter exists in the provided set of authentication parameters.
         *
         * @param parameters The set of authentication parameters from the database.
         * @return {@code true} if the parameter exists, {@code false} otherwise.
         */
        public boolean isExistFrom(final Set<AuthSideParameter> parameters) {
            return parameters.stream()
                    .anyMatch(parameterFromDatabase -> parameterFromDatabase.getName().equals(this.name()));
        }

    }

}

